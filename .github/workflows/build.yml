name: Build

on: [ push ]

jobs:
#  build-windows:
#
#    runs-on: windows-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        jvm-version: [ 8, 11 ]
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - uses: actions/cache@v2
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - name: Set up JDK ${{matrix.jvm-version}}
#        uses: actions/setup-java@v1
#        with:
#          java-version: ${{matrix.jvm-version}}
#
#      - name: Build
#        run: ./gradlew clean build
#        shell: bash

  build-linux:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        jvm-version: [ 8 ]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK ${{matrix.jvm-version}}
        uses: actions/setup-java@v1
        with:
          java-version: ${{matrix.jvm-version}}

      - name: Build
        run: ./gradlew clean build
        shell: bash

      - uses: actions/upload-artifact@v2
        with:
          name: fmu-builder
          path: fmu-builder-app/build/libs/

      - uses: actions/upload-artifact@v2
        with:
          name: test-fmu
          path: fmu-builder/build/generated/Identity.fmu

  test-external:
    needs: build-linux
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        jvm-version: [ 8 ]

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK ${{matrix.jvm-version}}
        uses: actions/setup-java@v2
        with:
          java-version: ${{matrix.jvm-version}}
          distribution: 'adopt'

      - name: Setup PATH on Windows
        if: startsWith(runner.os, 'Windows')
        run: |
          echo "${{env.JAVA_HOME}}\bin" >> $GITHUB_PATH
          echo "${{env.JAVA_HOME}}\jre\server" >> $GITHUB_PATH
          echo "${{env.JAVA_HOME}}\jre\bin\server" >> $GITHUB_PATH
        shell: bash

      - name: Setup PATH on Linux
        if: startsWith(runner.os, 'Linux')
        run: |
          echo "${{env.JAVA_HOME}}/jre/bin/server" >> $GITHUB_PATH
          echo "${{env.JAVA_HOME}}/lib/server/jvm" >> $GITHUB_PATH
          echo "${{env.JAVA_HOME}}/jre/lib/amd64/server" >> $GITHUB_PATH
        shell: bash

      - name: Download fmus
        uses: actions/download-artifact@v2
        with:
          name: test-fmu
          path: fmu-builder/build/generated/

      - name: Download and run FMUchecker (Windows)
        if: startsWith(runner.os, 'Windows')
        run: |
          curl --output FMUChecker-2.0.4-win64.zip --url https://github.com/modelica-tools/FMUComplianceChecker/releases/download/2.0.4/FMUChecker-2.0.4-win64.zip -L
          7z x FMUChecker-2.0.4-win64.zip && cd FMUChecker-2.0.4-win64
          ./fmuCheck.win64.exe ../fmu-builder/build/generated/Identity.fmu
        shell: bash

      - name: Download and run FMUchecker (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          wget https://github.com/modelica-tools/FMUComplianceChecker/releases/download/2.0.4/FMUChecker-2.0.4-linux64.zip
          7z x FMUChecker-2.0.4-linux64.zip && cd FMUChecker-2.0.4-linux64
          ./fmuCheck.linux64 ../fmu-builder/build/generated/Identity.fmu
        shell: bash
